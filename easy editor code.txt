from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QMessageBox, QListWidget, QApplication, QWidget, QPushButton, QLabel, QVBoxLayout, QHBoxLayout, QFileDialog
from PIL import Image, ImageFilter 
from PyQt5.QtGui import QPixmap
import os

class ImageProcessor():
    def __init__(self):
        self.image = None
        self.name_image = None
        self.save_dir = 'Mod'

    def loadImage(self, filename):
        self.filename = filename
        image_path = os.path.join(workdir, filename)
        self.image = Image.open(image_path)

    def showImage(self, path):
        image.hide()
        pixmapimage = QPixmap(path)
        w, h, = image.width(), image.height()
        pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
        image.setPixmap(pixmapimage)
        image.show()

    def do_bw(self):
        try:
            self.image = self.image.filter(SHARPEN)
            self.saveImage()
            image_path = os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        except:
            m = QMessageBox()
            m.setText('Изображение для изменения не выбрано')
            m.setWindowTitle('Ошибка')
            m.exec_()

    def do_mirror(self):
        try:
            self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
            self.saveImage()
            image_path = os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        except:
            m = QMessageBox()
            m.setText('Изображение для изменения не выбрано')
            m.setWindowTitle('Ошибка')
            m.exec_()

    def do_left(self):
        try:
            self.image = self.image.transpose(Image.ROTATE_270)
            self.saveImage()
            image_path = os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        except:
            m = QMessageBox()
            m.setText('Изображение для изменения не выбрано')
            m.setWindowTitle('Ошибка')
            m.exec_()
    
    def do_right(self):
        try:
            self.image = self.image.transpose(Image.ROTATE_90)
            self.saveImage()
            image_path = os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        except:
            m = QMessageBox()
            m.setText('Изображение для изменения не выбрано')
            m.setWindowTitle('Ошибка')
            m.exec_()

    def do_blur(self):
        try:
            self.image = self.image.filter(ImageFilter.BLUR)
            self.saveImage()
            image_path = os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        except:
            m = QMessageBox()
            m.setText('Изображение для изменения не выбрано')
            m.setWindowTitle('Ошибка')
            m.exec_()

    def saveImage(self):
        path = os.path.join(workdir, self.save_dir)
        if not(os.path.exists(path) or os.path.isdir(path)):
            os.mkdir(path)
        image_path = os.path.join(path, self.filename)
        self.image.save(image_path)

def showChosenImage():
    if lw_files.currentRow() >= 0:
        filename = lw_files.currentItem().text()
        workimage.loadImage(filename)
        image_path = os.path.join(workdir, workimage.filename)
        workimage.showImage(image_path)

def chooseWorkdir():
    global workdir
    workdir = QFileDialog.getExistingDirectory()

def fillter(files, extensions):
    result = []
    for filename in files:
        for ext in extensions:
            if filename.endswith(ext):
                result.append(filename)
    return result

def showFilenamesList():
    try:
        extensions = ['png', 'jpg', 'bmp']
        chooseWorkdir()
        result = fillter(os.listdir(workdir), extensions)
        lw_files.clear()
        for res in result:
            lw_files.addItem(res)
        if len(result) == 0:
            m = QMessageBox()
            m.setText('Файлы изображений не обнаружены')
            m.setWindowTitle('Ошибка')
            m.exec_()
    except:
        pass

app = QApplication([])
win = QWidget()

workdir = ''

#widgets:
but_file = QPushButton('Папка')
but_left = QPushButton('Лево')
but_right = QPushButton('Право')
but_mirror = QPushButton('Зеркало')
but_blur = QPushButton('Резкость')
but_gray = QPushButton('Ч/Б')
image = QLabel('')
lw_files = QListWidget()

win.resize(1280, 720)
win.setWindowTitle('Easy Editor')

line = QHBoxLayout()
line1 = QVBoxLayout()
line2 = QVBoxLayout()
line1.addWidget(but_file)
line1.addWidget(lw_files, stretch = 2)
line2_1 = QHBoxLayout()
line2_1.addWidget(but_left)
line2_1.addWidget(but_right)
line2_1.addWidget(but_mirror)
line2_1.addWidget(but_blur)
line2_1.addWidget(but_gray)
line2.addWidget(image)
line2.addLayout(line2_1)
line.addLayout(line1, 20)
line.addLayout(line2, 80)
win.setLayout(line)

win.show()

workimage = ImageProcessor()

but_file.clicked.connect(showFilenamesList)
lw_files.currentRowChanged.connect(showChosenImage)
but_gray.clicked.connect(workimage.do_bw)
but_blur.clicked.connect(workimage.do_blur)
but_right.clicked.connect(workimage.do_right)
but_left.clicked.connect(workimage.do_left)
but_mirror.clicked.connect(workimage.do_mirror)

app.exec_()
                